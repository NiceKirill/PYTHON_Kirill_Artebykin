import aiohttp  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import logging
import re
import asyncio
from bs4 import BeautifulSoup
import g4f  # –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI API
from colorama import Fore, Style  # –î–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
from functools import lru_cache

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
API_TOKEN = '8042576890:AAEdk_lK-PP84m2cP5Ylhy9UYXlneZLswcc'

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ—Ç—ã—Ä—å–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –¥–≤–∞ —Ä—è–¥–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç"),
            KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å AI")
        ],
        [
            KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
            KeyboardButton(text="üë• –õ—é–¥–∏")
        ],
        [
            KeyboardButton(text="üßë‚Äçüíº –í–ª–∞–¥–∏—Å–ª–∞–≤ –ë–æ—Ä–∏—Å–æ–≤–∏—á –ö–∞–ª–∞–º–±–µ—Ç")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
def is_valid_url(url: str) -> bool:
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
    regex = re.compile(
        r'^(?:http|https)://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$')
    return re.match(regex, url) is not None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_states[message.from_user.id] = None
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)


# "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç"
@dp.message(lambda message: "–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" in message.text.lower())
async def handle_analyze_site(message: Message):
    user_states[message.from_user.id] = 'analyze'
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")


# "–ü–æ–º–æ—â—å AI" (–¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å GPT-4)
@dp.message(lambda message: "–ø–æ–º–æ—â—å ai" in message.text.lower())
async def handle_help_ai(message: Message):
    user_states[message.from_user.id] = 'help_ai'
    await message.answer("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.")


# "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@dp.message(lambda message: "–∫–æ–Ω—Ç–∞–∫—Ç—ã" in message.text.lower())
async def handle_contacts(message: Message):
    user_states[message.from_user.id] = 'contacts'
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, —á—Ç–æ–±—ã —è –Ω–∞—à–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")


# "–õ—é–¥–∏"
@dp.message(lambda message: "–ª—é–¥–∏" in message.text.lower())
async def handle_people(message: Message):
    user_states[message.from_user.id] = 'people'
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, —á—Ç–æ–±—ã —è –Ω–∞—à–µ–ª –ª—é–¥–µ–π –Ω–∞ –Ω–µ–º.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞ –∏ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)
@dp.message(lambda message: re.match(r'http[s]?://[^\s]+', message.text))
async def handle_url(message: Message):
    url = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if not is_valid_url(url):
        await message.answer("–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL.")
        return

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")

    state = user_states.get(message.from_user.id)

    if state == 'analyze':
        result = await analyze_website(url)
        if isinstance(result, dict):
            response = (f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}\n\n"
                        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['images']}\n"
                        f"–°—Å—ã–ª–æ–∫: {result['links']}\n"
                        f"–°–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {result['words']}")

        else:
            response = result
        await message.answer(response)
        user_states[message.from_user.id] = None

    elif state == 'contacts':
        result = await find_contacts(url)
        try:
            g4f_response = await process_gpt4_data(result, "user",
                                                   "–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö: {0}. –û—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ +, –∏ –ø–æ—á—Ç—ã —Å @.")
            await message.answer(g4f_response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å g4f: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        user_states[message.from_user.id] = None

    elif state == 'people':
        result = await find_people(url)
        try:
            g4f_response = await process_gpt4_data(result, "user",
                                                   "–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª—é–¥—è—Ö —Å —Å–∞–π—Ç–∞: {0}. –û—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –§–ò–û –∏, –µ—Å–ª–∏ –µ—Å—Ç—å, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
            await message.answer(g4f_response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å g4f: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        user_states[message.from_user.id] = None

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT-4
@dp.message(lambda message: user_states.get(message.from_user.id) == 'help_ai')
async def handle_ai_question(message: Message):
    user_states[message.from_user.id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT-4
        g4f_response = await process_gpt4_data(message.text, "user", "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {0}")
        await message.answer(g4f_response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPT-4: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GPT-4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–ó–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GPT-4
async def process_gpt4_data(result: str, role: str, content_template: str):
    try:
        g4f_response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{"role": role, "content": content_template.format(result)}]
        )
        return str(g4f_response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPT-4: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GPT-4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
@lru_cache(maxsize=100)  # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–æ–≤
async def analyze_website(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    text = await response.text()
                    soup = BeautifulSoup(text, 'html.parser')

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    title = soup.find('title').text.strip() if soup.find('title') else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    images = soup.find_all('img')
                    image_count = len(images)

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    links = soup.find_all('a')
                    link_count = len(links)

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    text_content = soup.get_text().strip()
                    word_count = len(text_content.split())

                    return {
                        "title": title,
                        "images": image_count,
                        "links": link_count,
                        "words": word_count
                    }
                else:
                    return f"{Fore.RED}–û—à–∏–±–∫–∞: –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ {response.status}{Style.RESET_ALL}"
    except Exception as e:
        return f"{Fore.RED}–û—à–∏–±–∫–∞: {str(e)}{Style.RESET_ALL}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ø–æ—á—Ç—ã –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)
async def find_contacts(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    text = await response.text()

                    # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '+'
                    phones = set(re.findall(r'\+[\d\-\s()]{7,20}', text))

                    # –ò—â–µ–º email-–∞–¥—Ä–µ—Å–∞
                    emails = set(re.findall(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', text))

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    response_message = ""

                    # –í—ã–≤–æ–¥–∏–º email-–∞–¥—Ä–µ—Å–∞
                    if emails:
                        response_message += "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n"
                        for i, email in enumerate(emails, 1):
                            response_message += f"{i}. {email}\n"

                    # –í—ã–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
                    if phones:
                        response_message += "\n–¢–µ–ª–µ—Ñ–æ–Ω—ã:\n"
                        for i, phone in enumerate(phones, 1):
                            response_message += f"{i}. {phone}\n"

                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if not emails and not phones:
                        response_message = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

                    return response_message
                else:
                    return f"{Fore.RED}–û—à–∏–±–∫–∞: –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ {response.status}{Style.RESET_ALL}"
    except Exception as e:
        return f"{Fore.RED}–û—à–∏–±–∫–∞: {str(e)}{Style.RESET_ALL}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –Ω–∞ —Å–∞–π—Ç–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
people_regex = r'([–ê-–Ø–Å][a-z–∞-—è—ë]+ [–ê-–Ø–Å][a-z–∞-—è—ë]+)(?:.*?(\d{1,2}[-/.]\d{1,2}[-/.]\d{4}))?'


async def find_people(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    text = await response.text()

                    # –ü—Ä–∏–º–µ—Ä —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –§–ò–û –∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
                    people = set(re.findall(people_regex, text))

                    if people:
                        response_message = "–õ—é–¥–∏ –Ω–∞ —Å–∞–π—Ç–µ:\n\n"
                        for i, person in enumerate(people, 1):
                            full_name = person[0]
                            birth_date = person[1] if person[1] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                            response_message += f"{i}. {full_name} - {birth_date}\n"

                        return response_message.strip()

                    else:
                        return "–õ—é–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ."

                else:
                    return f"{Fore.RED}–û—à–∏–±–∫–∞: –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ {response.status}{Style.RESET_ALL}"
    except Exception as e:
        return f"{Fore.RED}–û—à–∏–±–∫–∞: {str(e)}{Style.RESET_ALL}"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–ª–∞–¥–∏—Å–ª–∞–≤ –ë–æ—Ä–∏—Å–æ–≤–∏—á –ö–∞–ª–∞–º–±–µ—Ç"
@dp.message(lambda message: "–≤–ª–∞–¥–∏—Å–ª–∞–≤ –±–æ—Ä–∏—Å–æ–≤–∏—á –∫–∞–ª–∞–º–±–µ—Ç" in message.text.lower())
async def handle_vladislav(message: Message):
    # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    text = """
üìú **–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å**:

üîπ –ó–∞–≤–µ–¥—É—é—â–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–µ–π –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∏ –∏ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ –≤ –†–ö–°–ò
üîπ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ ¬´–ì—ç–Ω–¥–∞–ª—å—Ñ¬ª
üîπ –≠–∫—Å–ø–µ—Ä—Ç WorldSkills –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º ¬´–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ¬ª, ¬´–í–µ–±-–¥–∏–∑–∞–π–Ω –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞¬ª (–≠–∫—Å–ø–µ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞, –≠–∫—Å–ø–µ—Ä—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞)
üîπ –≠–∫—Å–ø–µ—Ä—Ç Abilympics –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–í–µ–±-–¥–∏–∑–∞–π–Ω –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞¬ª

üìö **–ü—Ä–µ–ø–æ–¥–∞–≤–∞–µ–º—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã**:

üîπ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ
üîπ –û—Å–Ω–æ–≤—ã –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∏ –∏ –æ—Å–Ω–æ–≤—ã —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏
üîπ –í–µ–±-–¥–∏–∑–∞–π–Ω –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
üîπ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
üîπ –û–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
üîπ –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ë–î

üíª **–û—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è**:

üî∏ –°, Python, PHP, SQL, HTML, CSS
"""
    await message.answer(text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
